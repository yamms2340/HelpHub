import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  Box,
  Typography,
  Avatar,
  IconButton,
  InputAdornment,
  Alert,
  CircularProgress,
} from '@mui/material';
import {
  Close,
  CampaignOutlined,
  CurrencyRupee,
  CalendarToday,
  LocationOn,
} from '@mui/icons-material';
import { campaignAPI } from '../../services/campaignAPI';

const categories = [
  'Healthcare',
  'Education', 
  'Food & Nutrition',
  'Housing',
  'Environment',
  'Emergency',
  'Community',
  'Other'
];

const urgencyLevels = [
  'Low',
  'Medium', 
  'High',
  'Critical'
];

function CampaignForm({ open, onClose, onSave }) {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    targetAmount: '',
    category: '',
    urgency: 'Medium',
    location: '',
    endDate: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validation
    if (!formData.title.trim()) {
      setError('Campaign title is required');
      return;
    }
    
    if (!formData.description.trim()) {
      setError('Campaign description is required');
      return;
    }
    
    if (!formData.targetAmount || parseFloat(formData.targetAmount) <= 0) {
      setError('Valid target amount is required');
      return;
    }
    
    if (!formData.category) {
      setError('Campaign category is required');
      return;
    }

    setLoading(true);
    setError('');

    try {
      console.log('🚀 Creating campaign with data:', formData);
      
      const response = await campaignAPI.createCampaign({
        ...formData,
        targetAmount: parseFloat(formData.targetAmount)
      });

      console.log('✅ Campaign created successfully:', response.data);

      // Reset form
      setFormData({
        title: '',
        description: '',
        targetAmount: '',
        category: '',
        urgency: 'Medium',
        location: '',
        endDate: ''
      });

      onSave(response.data.data);
      onClose();
      
    } catch (error) {
      console.error('❌ Error creating campaign:', error);
      setError(error.response?.data?.message || 'Failed to create campaign');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    if (!loading) {
      setFormData({
        title: '',
        description: '',
        targetAmount: '',
        category: '',
        urgency: 'Medium',
        location: '',
        endDate: ''
      });
      setError('');
      onClose();
    }
  };

  return (
    <Dialog
      open={open}
      onClose={handleClose}
      maxWidth="md"
      fullWidth
      PaperProps={{
        sx: {
          borderRadius: '24px',
          background: 'linear-gradient(135deg, #ffffff 0%, #f8fafc 100%)',
          boxShadow: '0 20px 40px rgba(37, 99, 235, 0.15)',
        }
      }}
    >
      <DialogTitle
        sx={{
          background: 'linear-gradient(135deg, #2563eb 0%, #3b82f6 100%)',
          color: 'white',
          py: 3,
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
        }}
      >
        <Box display="flex" alignItems="center" gap={2}>
          <Avatar sx={{ background: 'rgba(255,255,255,0.2)' }}>
            <CampaignOutlined />
          </Avatar>
          <Box>
            <Typography variant="h5" fontWeight="700">
              Create New Campaign ✨
            </Typography>
            <Typography variant="caption" sx={{ opacity: 0.9 }}>
              Launch your fundraising initiative
            </Typography>
          </Box>
        </Box>
        <IconButton
          onClick={handleClose}
          disabled={loading}
          sx={{
            color: 'white',
            background: 'rgba(255,255,255,0.1)',
            '&:hover': { background: 'rgba(255,255,255,0.2)' }
          }}
        >
          <Close />
        </IconButton>
      </DialogTitle>

      <form onSubmit={handleSubmit}>
        <DialogContent sx={{ p: 4 }}>
          {error && (
            <Alert 
              severity="error" 
              sx={{ mb: 3, borderRadius: '12px' }}
              onClose={() => setError('')}
            >
              {error}
            </Alert>
          )}

          <Grid container spacing={3}>
            <Grid item xs={12}>
              <TextField
                fullWidth
                label="Campaign Title"
                name="title"
                value={formData.title}
                onChange={handleChange}
                placeholder="e.g., Help Build a Community Center"
                disabled={loading}
                sx={{
                  '& .MuiOutlinedInput-root': {
                    borderRadius: '12px',
                  }
                }}
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                multiline
                rows={4}
                label="Campaign Description"
                name="description"
                value={formData.description}
                onChange={handleChange}
                placeholder="Describe your campaign, its goals, and the impact it will make..."
                disabled={loading}
                sx={{
                  '& .MuiOutlinedInput-root': {
                    borderRadius: '12px',
                  }
                }}
              />
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="Target Amount"
                name="targetAmount"
                type="number"
                value={formData.targetAmount}
                onChange={handleChange}
                placeholder="50000"
                disabled={loading}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <CurrencyRupee sx={{ color: '#2563eb' }} />
                    </InputAdornment>
                  ),
                }}
                sx={{
                  '& .MuiOutlinedInput-root': {
                    borderRadius: '12px',
                  }
                }}
              />
            </Grid>

            <Grid item xs={12} sm={6}>
              <FormControl fullWidth disabled={loading}>
                <InputLabel>Category</InputLabel>
                <Select
                  name="category"
                  value={formData.category}
                  label="Category"
                  onChange={handleChange}
                  sx={{ borderRadius: '12px' }}
                >
                  {categories.map((category) => (
                    <MenuItem key={category} value={category}>
                      {category}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} sm={6}>
              <FormControl fullWidth disabled={loading}>
                <InputLabel>Urgency Level</InputLabel>
                <Select
                  name="urgency"
                  value={formData.urgency}
                  label="Urgency Level"
                  onChange={handleChange}
                  sx={{ borderRadius: '12px' }}
                >
                  {urgencyLevels.map((level) => (
                    <MenuItem key={level} value={level}>
                      {level}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>

            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="Location (Optional)"
                name="location"
                value={formData.location}
                onChange={handleChange}
                placeholder="e.g., Mumbai, India"
                disabled={loading}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <LocationOn sx={{ color: '#2563eb' }} />
                    </InputAdornment>
                  ),
                }}
                sx={{
                  '& .MuiOutlinedInput-root': {
                    borderRadius: '12px',
                  }
                }}
              />
            </Grid>

            <Grid item xs={12}>
              <TextField
                fullWidth
                label="End Date (Optional)"
                name="endDate"
                type="date"
                value={formData.endDate}
                onChange={handleChange}
                disabled={loading}
                InputLabelProps={{
                  shrink: true,
                }}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <CalendarToday sx={{ color: '#2563eb' }} />
                    </InputAdornment>
                  ),
                }}
                sx={{
                  '& .MuiOutlinedInput-root': {
                    borderRadius: '12px',
                  }
                }}
              />
            </Grid>
          </Grid>
        </DialogContent>

        <DialogActions sx={{ p: 3, gap: 2 }}>
          <Button
            variant="outlined"
            onClick={handleClose}
            disabled={loading}
            sx={{
              borderRadius: '12px',
              textTransform: 'none',
              px: 4,
              borderColor: '#e5e7eb',
              color: '#6b7280',
              '&:hover': {
                borderColor: '#d1d5db',
                background: '#f9fafb',
              }
            }}
          >
            Cancel
          </Button>
          <Button
            type="submit"
            variant="contained"
            disabled={loading}
            startIcon={
              loading ? <CircularProgress size={20} color="inherit" /> : <CampaignOutlined />
            }
            sx={{
              borderRadius: '12px',
              textTransform: 'none',
              px: 4,
              background: 'linear-gradient(135deg, #2563eb 0%, #3b82f6 100%)',
              '&:hover': {
                background: 'linear-gradient(135deg, #1d4ed8 0%, #2563eb 100%)',
              }
            }}
          >
            {loading ? 'Creating Campaign...' : 'Create Campaign'}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
}

export default CampaignForm;
